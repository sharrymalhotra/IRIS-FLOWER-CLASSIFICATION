# -*- coding: utf-8 -*-
"""IRIS FLOWER CLASSIFICATION3.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1QIfK08BLKaa4NEGZiObhOHKhi2OQ0wOc

Importing the Dependencies
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import warnings
warnings.filterwarnings('ignore')

"""Loading the Dataset"""

# load the csv data
df = pd.read_csv('/content/archive (1).zip')
df.head()

"""VISUALIZATION OF OUR DATASET"""

# delete a column
df = df.drop(columns = [])
df.head()

# to display stats about data
df.describe()

# to basic info about datatype
df.info()

# to display no. of samples on each class
df['species'].value_counts()

# to basic info about datatype
df.info()

# to display no. of samples on each class
df['species'].value_counts()

"""Preprocessing the dataset"""

# check for null values
df.isnull().sum()

"""Exploratory Data Analysis"""

# histograms
df['sepal_length'].hist()

df['sepal_width'].hist()

df['petal_length'].hist()

df['petal_width'].hist()

# scatterplot
colors = ['red', 'orange', 'blue']
species = ['Iris-virginica','Iris-versicolor','Iris-setosa']

for i in range(3):
    x = df[df['species'] == species[i]]
    plt.scatter(x['sepal_length'], x['sepal_width'], c = colors[i], label=species[i])
plt.xlabel("Sepal Length")
plt.ylabel("Sepal Width")
plt.legend()

for i in range(3):
    x = df[df['species'] == species[i]]
    plt.scatter(x['petal_length'], x['petal_width'], c = colors[i], label=species[i])
plt.xlabel("Petal Length")
plt.ylabel("Petal Width")
plt.legend()

for i in range(3):
    x = df[df['species'] == species[i]]
    plt.scatter(x['sepal_length'], x['petal_length'], c = colors[i], label=species[i])
plt.xlabel("Sepal Length")
plt.ylabel("Petal Length")
plt.legend()

for i in range(3):
    x = df[df['species'] == species[i]]
    plt.scatter(x['sepal_width'], x['petal_width'], c = colors[i], label=species[i])
plt.xlabel("Sepal Width")
plt.ylabel("Petal Width")
plt.legend()

"""Label Encoder"""

from sklearn.preprocessing import LabelEncoder
 le = LabelEncoder()

df['species'] = le.fit_transform(df['species'])
df.head()

"""Model Training"""

from sklearn.model_selection import train_test_split
# train - 70
# test - 30
X = df.drop(columns=['species'])
Y = df['species']
x_train, x_test, y_train, y_test = train_test_split(X, Y, test_size=0.30)

# logistic regression
from sklearn.linear_model import LogisticRegression
model = LogisticRegression()

# model training
model.fit(x_train, y_train)

# print metric to get performance
print("Accuracy: ",model.score(x_test, y_test) * 100)

# decision tree
from sklearn.tree import DecisionTreeClassifier
model = DecisionTreeClassifier()

model.fit(x_train, y_train)

# print metric to get performance
print("Accuracy: ",model.score(x_test, y_test) * 100)

# save the model
import pickle
filename = 'savedmodel.sav'
pickle.dump(model, open(filename, 'wb'))

x_test.head()

load_model = pickle.load(open(filename,'rb'))

load_model.predict([[6.0, 2.2, 4.0, 1.0]])